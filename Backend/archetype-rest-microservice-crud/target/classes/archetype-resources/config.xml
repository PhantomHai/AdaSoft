<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.41">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.20">
      <gitLabConnection>GITLABCOORDINADOR</gitLabConnection>
      <jobCredentialId></jobCredentialId>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.dabsquared.gitlabjenkins.GitLabPushTrigger plugin="gitlab-plugin@1.5.20">
          <spec></spec>
          <triggerOnPush>true</triggerOnPush>
          <triggerToBranchDeleteRequest>false</triggerToBranchDeleteRequest>
          <triggerOnMergeRequest>false</triggerOnMergeRequest>
          <triggerOnlyIfNewCommitsPushed>false</triggerOnlyIfNewCommitsPushed>
          <triggerOnPipelineEvent>false</triggerOnPipelineEvent>
          <triggerOnAcceptedMergeRequest>false</triggerOnAcceptedMergeRequest>
          <triggerOnClosedMergeRequest>false</triggerOnClosedMergeRequest>
          <triggerOnApprovedMergeRequest>false</triggerOnApprovedMergeRequest>
          <triggerOpenMergeRequestOnPush>never</triggerOpenMergeRequestOnPush>
          <triggerOnNoteRequest>false</triggerOnNoteRequest>
          <noteRegex>Jenkins please retry a build</noteRegex>
          <ciSkip>true</ciSkip>
          <skipWorkInProgressMergeRequest>true</skipWorkInProgressMergeRequest>
          <labelsThatForcesBuildIfAdded></labelsThatForcesBuildIfAdded>
          <setBuildDescription>true</setBuildDescription>
          <branchFilterType>All</branchFilterType>
          <includeBranchesSpec></includeBranchesSpec>
          <excludeBranchesSpec></excludeBranchesSpec>
          <sourceBranchRegex></sourceBranchRegex>
          <targetBranchRegex></targetBranchRegex>
          <secretToken>{AQAAABAAAAAQOC+SGXeAOIKCP8BTJvm/IS0qO4ynVrkNNPE0+QwT5kg=}</secretToken>
          <pendingBuildName></pendingBuildName>
          <cancelPendingBuildsOnUpdate>false</cancelPendingBuildsOnUpdate>
        </com.dabsquared.gitlabjenkins.GitLabPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.94">
    <script>pipeline {
    agent any
    tools {
        maven &quot;mvnHome&quot;
    }
    
    environment {
        GIT_CREDENTIALS = &apos;jenkins_users&apos; //No modificar
    }
  
    stages {
        stage(&apos;Download Git&apos;) {
            steps {            
                git branch: &quot;${env.gitlabBranch}&quot;, credentialsId: &quot;${env.GIT_CREDENTIALS}&quot;, url: &quot;${env.gitlabSourceRepoURL}&quot;
           }
        }
        stage(&apos;Extracción&apos;) {
            steps{
                echo &quot;rama recibida desde gitlab &gt;&gt; ${env.gitlabBranch}&quot;
                script {
                    APP_NAME = readMavenPom().getArtifactId()
                    APP_VERSION = readMavenPom().getVersion()
                    RAMA = &quot;${env.gitlabBranch}&quot;
                    if(RAMA.contains(&quot;jaeger&quot;)){
                        namespace = &quot;openshift-distributed-tracing&quot;
                        template = &quot;template-bajos.yaml&quot;
                        echo &quot;namespace = ${namespace}&quot;
                        echo &quot;template = ${template}&quot;
                    }else{
                        if(RAMA.contains(&quot;develop&quot;)){
                        namespace = &quot;coordinador-dev&quot;
                        template = &quot;template-develop.yaml&quot;
                        echo &quot;namespace = ${namespace}&quot;
                        echo &quot;template = ${template}&quot;
                        }
                        if(RAMA.contains(&quot;qa&quot;)){
                            namespace = &quot;coordinador-qa&quot;
                            template = &quot;template-qa.yaml&quot;
                            echo &quot;namespace = ${namespace}&quot;
                            echo &quot;template = ${template}&quot;
                        }
                        if(RAMA.contains(&quot;master&quot;)){
                            namespace = &quot;coordinador&quot;
                            template = &quot;template-masterk.yaml&quot;
                            echo &quot;namespace = ${namespace}&quot;
                            echo &quot;template = ${template}&quot;
                        }
                    }
                    
                }
            }
        }
        stage(&apos;Generación de Recursos&apos;){
            steps{
                sh &quot;${OC_LOGIN}&quot;
                sh &quot;oc project ${namespace}&quot;
                sh &quot;oc delete all --selector application=${APP_NAME}&quot;
                sh &quot;oc new-app -f ${template}&quot;
            }
        }
        stage(&apos;Build&apos;){
            steps {
                sh &quot;mvn -s configuration/settings.xml clean package -DskipTest=true -Dmaven.test.skip=true&quot;
            }
        }
        //stage(&apos;Fortify&apos;) {
        //    steps {
        //        fortifyRemoteArguments scanOptions: &apos;&apos;, transOptions: &apos;&quot;-exclude \&apos;.mvn/*\&apos;&quot;&apos;
        //        fortifyRemoteAnalysis remoteAnalysisProjectType: fortifyOther(), uploadSSC: [appName: &quot;${env.APP_FORTIFY_NAME}&quot;, appVersion: &quot;${env.APP_FORTIFY_VERSION}&quot;]               
        //    }
        //}
        stage(&apos;Copiar JAR&apos;){
            steps{
                sh &quot;cp target/${APP_NAME}-${APP_VERSION}.jar target/ROOT.jar&quot;
            }
        }
        /*stage(&apos;Upload Maven Repository&apos;){
            steps{
                sh &quot;mvn deploy nexus?&quot;
            }
        }*/
        stage(&apos;Build Openshift&apos;) {
            steps {
                sh &quot;oc start-build ${APP_NAME} --from-file=target/ROOT.jar --wait=true --follow&quot;
            }
        }
        /*stage(&apos;Deploy Rollout Openshift&apos;){
            steps {
                //si existen imagechange triggers, esta stage no es necesaria
                sh &quot;oc rollout latest dc/${APP_NAME}&quot;
            }
        }*/
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>